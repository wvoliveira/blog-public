{"componentChunkName":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js","path":"/languages/python/1-zen/","result":{"data":{"site":{"siteMetadata":{"title":"O blog","social":[{"name":"LinkedIn","url":"https://www.linkedin.com/in/wvoliveira"},{"name":"GitHub","url":"https://github.com/wvoliveira"}]}},"blogPost":{"__typename":"MdxBlogPost","id":"f3730afb-f67e-57f4-9502-84026d4d50e4","excerpt":"Em um grupo onde discutiam sobre a linguagem de programação Python,  Tim Peters  fala sobre como as pessoas poderiam \"pensar\" sobre a…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Python: princípios do design\",\n  \"date\": \"2020-08-03T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Em um grupo onde discutiam sobre a linguagem de programa\\xE7\\xE3o Python, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/Tim_Peters_(software_engineer)\"\n  }), \"Tim Peters\"), \" fala sobre como as pessoas poderiam \\u201Cpensar\\u201D sobre a linguagem se baseando em alguns conceitos.\"), mdx(\"p\", null, \"Esses princ\\xEDpios podem ser vistos no output do pr\\xF3prio interpretador:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ python -m this\\n\\nThe Zen of Python, by Tim Peters\\n\\nBeautiful is better than ugly.\\nExplicit is better than implicit.\\nSimple is better than complex.\\nComplex is better than complicated.\\nFlat is better than nested.\\nSparse is better than dense.\\nReadability counts.\\nSpecial cases aren't special enough to break the rules.\\nAlthough practicality beats purity.\\nErrors should never pass silently.\\nUnless explicitly silenced.\\nIn the face of ambiguity, refuse the temptation to guess.\\nThere should be one-- and preferably only one --obvious way to do it.\\nAlthough that way may not be obvious at first unless you're Dutch.\\nNow is better than never.\\nAlthough never is often better than *right* now.\\nIf the implementation is hard to explain, it's a bad idea.\\nIf the implementation is easy to explain, it may be a good idea.\\nNamespaces are one honking great idea -- let's do more of those!\\n\")), mdx(\"p\", null, \"Vers\\xE3o traduzida retirada do \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://pt.wikipedia.org/wiki/Zen_of_Python\"\n  }), \"Wikipedia\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Bonito \\xE9 melhor que feio\\nExpl\\xEDcito \\xE9 melhor que impl\\xEDcito\\nSimples \\xE9 melhor que complexo\\nComplexo \\xE9 melhor que complicado\\nLinear \\xE9 melhor do que aninhado\\nEsparso \\xE9 melhor que denso\\nLegibilidade conta\\nCasos especiais n\\xE3o s\\xE3o especiais o bastante para quebrar as regras.\\nAinda que praticidade ven\\xE7a a pureza\\nErros nunca devem passar silenciosamente. \\nA menos que sejam explicitamente silenciados\\nDiante da ambiguidade, recuse a tenta\\xE7\\xE3o de adivinhar\\nDeveria haver um \\u2014 e preferencialmente apenas um \\u2014 modo \\xF3bvio para fazer algo.\\nEmbora esse modo possa n\\xE3o ser \\xF3bvio a princ\\xEDpio a menos que voc\\xEA seja holand\\xEAs\\nAgora \\xE9 melhor que nunca\\nEmbora nunca freq\\xFCentemente seja melhor que j\\xE1\\nSe a implementa\\xE7\\xE3o \\xE9 dif\\xEDcil de explicar, \\xE9 uma m\\xE1 ideia\\nSe a implementa\\xE7\\xE3o \\xE9 f\\xE1cil de explicar, pode ser uma boa ideia\\nNamespaces s\\xE3o uma grande ideia \\u2014 vamos ter mais dessas!\\n\")), mdx(\"p\", null, \"Enfim, achei interessante.\"), mdx(\"h4\", {\n    \"id\": \"referências\"\n  }, \"Refer\\xEAncias:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.python.org/dev/peps/pep-0020/\"\n  }), \"https://www.python.org/dev/peps/pep-0020/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/python/peps/blob/master/pep-0020.txt\"\n  }), \"https://github.com/python/peps/blob/master/pep-0020.txt\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://pt.wikipedia.org/wiki/Zen_of_Python\"\n  }), \"https://pt.wikipedia.org/wiki/Zen_of_Python\"))));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/languages/python/1-zen/","title":"Python: princípios do design","tags":[],"date":"August 03, 2020","image":null,"imageAlt":null,"socialImage":null},"previous":null,"next":{"__typename":"MdxBlogPost","id":"ba4a1eca-a47e-53b1-880d-a2ba34f3646a","excerpt":"Há um tempo atrás eu descobri o quão fácil é unir esses dois elementos sensacionais: Golang + React. Então nesse post irei mostrar como você…","slug":"/languages/go/1-golang-and-react/","title":"Go: Golang + React","date":"August 20, 2020"}},"pageContext":{"id":"f3730afb-f67e-57f4-9502-84026d4d50e4","nextId":"ba4a1eca-a47e-53b1-880d-a2ba34f3646a","maxWidth":1380}},"staticQueryHashes":["2744905544","2744905544","3090755652","386998304","764694655"]}