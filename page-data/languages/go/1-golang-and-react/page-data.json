{"componentChunkName":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js","path":"/languages/go/1-golang-and-react/","result":{"data":{"site":{"siteMetadata":{"title":"O blog","social":[{"name":"LinkedIn","url":"https://www.linkedin.com/in/wvoliveira"},{"name":"GitHub","url":"https://github.com/wvoliveira"}]}},"blogPost":{"__typename":"MdxBlogPost","id":"ba4a1eca-a47e-53b1-880d-a2ba34f3646a","excerpt":"Há um tempo atrás eu descobri o quão fácil é unir esses dois elementos sensacionais: Golang + React. Então nesse post irei mostrar como você…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Go: Golang + React\",\n  \"date\": \"2020-08-20T00:00:00.000Z\",\n  \"tags\": [\"go\", \"golang\", \"react\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"H\\xE1 um tempo atr\\xE1s eu descobri o qu\\xE3o f\\xE1cil \\xE9 unir esses dois elementos sensacionais: Golang + React. Ent\\xE3o nesse post irei mostrar como voc\\xEA pode fazer em sua casa, no conforto do seu lar, tomando aquela coca-cola ou aquela colorado bem gelada ou qualquer coisa, \\xE1gua talvez?\"), mdx(\"p\", null, \"Eu sempre tive curiosidade de como as empresas conseguem criar interfaces bonitas, funcionais, sensacionais etc e como escalam de forma r\\xE1pida essas aplica\\xE7\\xF5es.. Eis ent\\xE3o que descobri uma das formas, a rapidez do Golang e a facilidade de reutilizar v\\xE1\\xE1rios componentes prontos em seu front-end.\"), mdx(\"p\", null, \"Eu sei, existem v\\xE1rios frameworks, bibliotecas que podem ser utilizadas, mas como n\\xE3o sou especialista em nenhuma delas - e realmente meu conhecimento \\xE9 bem razo - eu vou mostrar as tecnologias que tenho interesse. Mas tenha em mente que voc\\xEA consegue utilizar qualquer framework com o Golang, ent\\xE3o se voc\\xEA conhece Angular, por que n\\xE3o unir Golang com Angular? Se liga aqui e aqui.\"), mdx(\"p\", null, \"Voltando ao Golang + React, acompanha comigo:\"), mdx(\"p\", null, \"Vamos criar uma pasta para o nosso projeto, nesse caso dei o nome de gore (Go de Golang e Re de React. \\xC9, nada original):\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ mkdir gore\\n$ cd gore\\n\")), mdx(\"p\", null, \"Agora vamos iniciar nosso m\\xF3dulo para controlar nossas depend\\xEAncias:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ go mod init gore\\n\")), mdx(\"p\", null, \"E bora usar o creat-react-app para iniciar nosso projeto em React:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ npx create-react-app web\\n$ cd web\\n\")), mdx(\"p\", null, \"Simm, o front-end ficar\\xE1 numa pasta chamada web. E caso voc\\xEA n\\xE3o tenha o npx instalado, atualize o seu npm, pois a partir do 5.2 esse CLI j\\xE1 vem instalado por padr\\xE3o.\"), mdx(\"p\", null, \"Vamos iniciar o projeto para ver se est\\xE1 tudo OK com o app em React:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ npm start\\n\")), mdx(\"p\", null, \"Caso o seu browser n\\xE3o abriu de forma autom\\xE1tica, tente acessar o endere\\xE7o http://localhost:3000/. Caso o s\\xEDmbolo do React esteja rodando nesse link, \\xE9 que o app est\\xE1 funcionando.\"), mdx(\"p\", null, \"Agora vamos jogar esse projeto que est\\xE1 em React para dentro do Golang. Transformar todos os arquivos js, css, html em vari\\xE1veis acess\\xEDveis dentro do Golang. Afinal, tudo \\xE9 bytes, certo?\"), mdx(\"p\", null, \"Podemos fazer isso com o alguns m\\xF3dulos: go-bindata, pkger, packr, statik e v\\xE1rios outros. Nesse caso iremos utilizar o pkger. Bora instalar ele:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ cd ..\\n$ go get github.com/markbates/pkger/cmd/pkger\\n\")), mdx(\"p\", null, \"E agora crie um arquivo main.go para ser nosso arquivo principal do nosso projeto em Golang e insira o seguinte conte\\xFAdo:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"package main\\n\\nimport (\\n    \\\"io\\\"\\n    \\\"log\\\"\\n    \\\"net/http\\\"\\n\\n    \\\"github.com/gorilla/mux\\\"\\n    \\\"github.com/markbates/pkger\\\"\\n)\\n\\nfunc main() {\\n    r := mux.NewRouter()\\n\\n    r.HandleFunc(\\\"/\\\", func(w http.ResponseWriter, r *http.Request) {\\n        w.WriteHeader(http.StatusOK)\\n\\n        f, err := pkger.Open(\\\"/public/index.html\\\")\\n        if err != nil {\\n            w.Write([]byte(err.Error()))\\n        }\\n        io.Copy(w, f)\\n        defer f.Close()\\n        return\\n    })\\n\\n    dir := http.FileServer(pkger.Dir(\\\"/public\\\"))\\n    r.PathPrefix(\\\"/public\\\").Handler(http.StripPrefix(\\\"/public\\\", dir))\\n\\n    log.Fatal(http.ListenAndServe(\\\":3000\\\", r))\\n}\\n\")), mdx(\"p\", null, \"Resumindo: iremos exibir o conte\\xFAdo do nosso arquivo principal do app em React (index.html) em um endpoint no Golang (\\u201D/\\u201D).\"), mdx(\"p\", null, \"N\\xE3o execute esse c\\xF3digo! Ainda temos que buildar o nosso projeto em React:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ cd web\\n$ PUBLIC_URL=\\\"/public\\\" npm run-script build\\n\")), mdx(\"p\", null, \"Essa vari\\xE1vel PUBLIC_URL serve para modificarmos o local onde os componentes do app ir\\xE3o procurar as depend\\xEAncias. Nesse caso, o Golang ir\\xE1 expor na rota /public.\"), mdx(\"p\", null, \"Ap\\xF3s o build terminar, uma pasta com o nome build ir\\xE1 aparecer. Vamos mover ela para o mesmo diret\\xF3rio do arquivo main.go e renomear para public:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ mv build ../public\\n$ cd ..\\n\")), mdx(\"p\", null, \"Ent\\xE3o nosso diret\\xF3rio ficou da seguinte forma:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"\\u251C\\u2500\\u2500 main.go\\n\\u251C\\u2500\\u2500 public\\n\\u2514\\u2500\\u2500 web\\n\")), mdx(\"p\", null, \"E bora executar:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ go run main.go\\n\")), mdx(\"p\", null, \"Veja que ao executar pela primeira vez, ele ir\\xE1 baixar todas as depend\\xEAncias necess\\xE1rias:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"go: finding module for package github.com/gorilla/mux\\ngo: found github.com/gorilla/mux in github.com/gorilla/mux v1.8.0\\n\")), mdx(\"p\", null, \"Por isso n\\xE3o instalamos o mux antes. Mas \\xE9 uma boa instalar as depend\\xEAncias antes, principalmente se voc\\xEA estiver utilizando o VSCode ou outro editor que tenha suporte ao auto-complete.\"), mdx(\"p\", null, \"Ao terminar de instalar as depend\\xEAncias, tente acessar o link: http://localhost:3000/. Se aparecer a mesma tela quando iniciamos nosso projeto pelo npm, \\xE9 que deu tudo certo.\"), mdx(\"p\", null, \"Agora bora criar o bin\\xE1rio:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ go build .\\n\")), mdx(\"p\", null, \"Ir\\xE1 aparecer um arquivo execut\\xE1vel com o nome do nosso projeto gore, com apenas 8M. Isso porque utilizamos o mux para facilitar nossa vida, se tiv\\xE9ssemos utilizado o http default do Golang ficaria menor ainda. J\\xE1 imaginou as possibilidades? Podemos utilizar tecnologias modernas no front-end e unir com a rapidez, simplicidade e eleg\\xE2ncia do Golang.\"), mdx(\"p\", null, \"Enfim, n\\xE3o \\xE9 s\\xF3 por isso. Eu sou p\\xE9ssimo em argumentar sobre tudo, mas talvez voc\\xEA acredite em mim nos pr\\xF3ximos posts.\"), mdx(\"p\", null, \"O conte\\xFAdo desse projeto pode ser encontrado aqui: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/wvoliveira/gore\"\n  }), \"https://github.com/wvoliveira/gore\"), \".\"), mdx(\"p\", null, \"At\\xE9 a pr\\xF3xima.\"));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/languages/go/1-golang-and-react/","title":"Go: Golang + React","tags":["go","golang","react"],"date":"August 20, 2020","image":null,"imageAlt":null,"socialImage":null},"previous":{"__typename":"MdxBlogPost","id":"f3730afb-f67e-57f4-9502-84026d4d50e4","excerpt":"Em um grupo onde discutiam sobre a linguagem de programação Python,  Tim Peters  fala sobre como as pessoas poderiam \"pensar\" sobre a…","slug":"/languages/python/1-zen/","title":"Python: princípios do design","date":"August 03, 2020"},"next":{"__typename":"MdxBlogPost","id":"a1ece37d-7cea-53dc-99de-f9757184b8a2","excerpt":"Ambiente virtual é bem útil quando trabalhamos com aplicações, scripts ou até mesmo testar alguma solução. Ele funciona como um ambiente…","slug":"/languages/python/2-ambiente-virtual/","title":"Python: ambiente virtual","date":"September 11, 2020"}},"pageContext":{"id":"ba4a1eca-a47e-53b1-880d-a2ba34f3646a","previousId":"f3730afb-f67e-57f4-9502-84026d4d50e4","nextId":"a1ece37d-7cea-53dc-99de-f9757184b8a2","maxWidth":1380}},"staticQueryHashes":["2744905544","2744905544","3090755652","386998304","764694655"]}