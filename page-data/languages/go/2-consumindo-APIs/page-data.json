{"componentChunkName":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js","path":"/languages/go/2-consumindo-APIs/","result":{"data":{"site":{"siteMetadata":{"title":"O blog","social":[{"name":"LinkedIn","url":"https://www.linkedin.com/in/wvoliveira"},{"name":"GitHub","url":"https://github.com/wvoliveira"}]}},"blogPost":{"__typename":"MdxBlogPost","id":"f59b954b-3fe6-5b26-a104-9c08611b58c8","excerpt":"Estamos rodeados por APIs que nos abrem lacks de oportunidades para automatizar nossos trabalhos manuais do dia a dia. E agora vou teâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Go: Consumindo APIs\",\n  \"date\": \"2020-11-06T00:00:00.000Z\",\n  \"tags\": [\"go\", \"golang\", \"API\", \"api\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Estamos rodeados por APIs que nos abrem lacks de oportunidades para automatizar nossos trabalhos manuais do dia a dia. E agora vou te mostrar como podemos consumir uma REST API com a linguagem Golang.\"), mdx(\"p\", null, \"Para voc\\xEA conseguir realizar as instru\\xE7\\xF5es contidas nesse post, irei utilizar uma API gratuita da internet: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://reqres.in/\"\n  }), \"https://reqres.in/\")), mdx(\"p\", null, \"No reqres temos tudo que uma REST API poder\\xE1 ter: estrutura em JSON, pagina\\xE7\\xE3o, autentica\\xE7\\xE3o e outros.\"), mdx(\"p\", null, \"Bora criar uma pasta com o nome reqres e inicializar nosso projeto:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ mkdir reqres\\n$ go mod init reqres\\n\")), mdx(\"p\", null, \"No Golang, precisamos criar a estrutura da resposta da API. Ent\\xE3o vamos escolher um endoint: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://reqres.in/api/users\"\n  }), \"https://reqres.in/api/users\")), mdx(\"p\", null, \"Exemplo de retorno desse endpoint:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n  \\\"page\\\": 1,\\n  \\\"per_page\\\": 1,\\n  \\\"total\\\": 12,\\n  \\\"total_pages\\\": 12,\\n  \\\"data\\\": [\\n    {\\n      \\\"id\\\": 1,\\n      \\\"email\\\": \\\"george.bluth@reqres.in\\\",\\n      \\\"first_name\\\": \\\"George\\\",\\n      \\\"last_name\\\": \\\"Bluth\\\",\\n      \\\"avatar\\\": \\\"https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg\\\"\\n    }\\n  ],\\n  \\\"ad\\\": {\\n    \\\"company\\\": \\\"StatusCode Weekly\\\",\\n    \\\"url\\\": \\\"http://statuscode.org/\\\",\\n    \\\"text\\\": \\\"A weekly newsletter focusing on software development, infrastructure, the server, performance, and the stack end of things.\\\"\\n  }\\n}\\n\")), mdx(\"p\", null, \"Agora que sabemos a estrutura da API, bora criar a estrutura no Golang. Crie um arquivo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main.go\"), \" na pasta reqres com o seguinte conte\\xFAdo:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"package main\\n\\ntype api struct {\\n    Page int `json:\\\"page\\\"`\\n    PerPage int `json:\\\"per_page\\\"`\\n    Total int `json:\\\"total\\\"`\\n    TotalPages int `json:\\\"total_pages\\\"`\\n    Data []user `json:\\\"data\\\"`\\n    Ad ad `json:\\\"ad\\\"`\\n}\\n\\ntype user struct {\\n    ID int `json:\\\"id\\\"`\\n    Email string `json:\\\"email\\\"`\\n    FirstName string `json:\\\"first_name\\\"`\\n    LastName string `json:\\\"last_name\\\"`\\n    Avatar string `json:\\\"avatar\\\"`\\n}\\n\\ntype ad struct {\\n    Company string `json:\\\"company\\\"`\\n    URL string `json:\\\"url\\\"`\\n    Text string `json:\\\"text\\\"`\\n}\\n\")), mdx(\"p\", null, \"Veja que parece bem complexo para manipular o retorno da API, mas temos que fazer isso para o Golang entender o resultado e assim conseguir manipular os dados.\"), mdx(\"p\", null, \"Separei a estrutura do retorno da API em 3 partes:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"O corpo da API com as chaves page, per_page, total, total_page, data e ad;\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"A estrutura do usu\\xE1rio: id, email, first_name, last_name e avatar;\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"A estrutura da chave \\u201Cad\\u201D: company, URL e text.\")), mdx(\"p\", null, \"As nota\\xE7\\xF5es json servem para converter de forma autom\\xE1tica os dados com a biblioteca json do pr\\xF3prio Golang.\"), mdx(\"p\", null, \"Vamos adicionar a chamada GET usando a biblioteca http:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"resp, err := http.Get(\\\"https://reqres.in/api/users\\\")\\nif err != nil {\\n    log.Fatal(err)\\n}\\n\")), mdx(\"p\", null, \"No Golang ver\\xE1 que temos que repetir v\\xE1rias coisas, mas n\\xE3o ligue muito pra isso, o resultado \\xE9 surpreendente.\"), mdx(\"p\", null, \"No c\\xF3digo acima simplesmente usamos a biblioteca http com o m\\xE9todo Get passando a URL que queremos enviar a requisi\\xE7\\xE3o. Com isso temos a resposta, mas ainda temos que tratar o conte\\xFAdo do corpo da resposta (body):\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"body, err := ioutil.ReadAll(resp.Body)\\nif err != nil {\\n    log.Fatal(body)\\n}\\n\")), mdx(\"p\", null, \"Utilizei a biblioteca ioutil para ler o conte\\xFAdo do body, que por padr\\xE3o \\xE9 do tipo io.Reader.\"), mdx(\"p\", null, \"Agora vamos criar uma vari\\xE1vel atribuindo a estrutura da API que criamos no come\\xE7o:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"content := api{}\\n\")), mdx(\"p\", null, \"E lembra da convers\\xE3o autom\\xE1tica que comentei?! Agora \\xE9 a hora. Bora utilizar a biblioteca json para converter o corpo da resposta para dentro da vari\\xE1vel content:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"err = json.Unmarshal(body, &content)\\nif err != nil {\\n    log.Fatal(err)\\n}\\n\")), mdx(\"p\", null, \"Veja que usamos & (ponteiro) para passarmos a refer\\xEAncia da vari\\xE1vel e n\\xE3o duplicar a vari\\xE1vel dentro da fun\\xE7\\xE3o, ou seja, estamos passando o endere\\xE7o da vari\\xE1vel em mem\\xF3ria. Se n\\xE3o entendeu, n\\xE3o tem problema, h\\xE1 outras pessoas que explicam melhor.\"), mdx(\"p\", null, \"Agora bora printar na tela o conte\\xFAdo da resposta da API utilizando a nossa estrutura atribu\\xEDda a vari\\xE1vel content:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"fmt.Printf(\\\"Page: %v\\\\n\\\", content.Page)\\nfmt.Printf(\\\"Per page: %v\\\\n\\\", content.PerPage)\\nfmt.Printf(\\\"Total: %v\\\\n\\\", content.Total)\\nfmt.Printf(\\\"Total pages: %v\\\\n\\\", content.TotalPages)\\n\")), mdx(\"p\", null, \"Porque n\\xE3o criar um loop e exibir todos os e-mails dos usu\\xE1rios:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"for _, c := range content.Data {\\n    fmt.Printf(\\\"E-mail: %v\\\\n\\\", c.Email)\\n}\\n\")), mdx(\"p\", null, \"Juntando todo o conte\\xFAdo que criamos at\\xE9 agora e jogando dentro da fun\\xE7\\xE3o main:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-go\"\n  }), \"func main() {\\n    resp, err := http.Get(\\\"https://reqres.in/api/users\\\")\\n    if err != nil {\\n        log.Fatal(err)\\n    }\\n\\n    body, err := ioutil.ReadAll(resp.Body)\\n    if err != nil {\\n        log.Fatal(body)\\n    }\\n\\n    content := api{}\\n\\n    err = json.Unmarshal(body, &content)\\n    if err != nil {\\n        log.Fatal(err)\\n    }\\n\\n    fmt.Printf(\\\"Page: %v\\\\n\\\", content.Page)\\n    fmt.Printf(\\\"Per page: %v\\\\n\\\", content.PerPage)\\n    fmt.Printf(\\\"Total: %v\\\\n\\\", content.Total)\\n    fmt.Printf(\\\"Total pages: %v\\\\n\\\", content.TotalPages)\\n\\n    for _, c := range content.Data {\\n        fmt.Printf(\\\"E-mail: %v\\\\n\\\", c.Email)\\n    }\\n}\\n\")), mdx(\"p\", null, \"Podemos rodar com o seguinte comando:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ go run .\\n\")), mdx(\"p\", null, \"Resultado:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"Page: 1\\nPer page: 6\\nTotal: 12\\nTotal pages: 2\\nE-mail: george.bluth@reqres.in\\nE-mail: janet.weaver@reqres.in\\nE-mail: emma.wong@reqres.in\\nE-mail: eve.holt@reqres.in\\nE-mail: charles.morris@reqres.in\\nE-mail: tracey.ramos@reqres.in\\n\")), mdx(\"p\", null, \"Sem contar que voc\\xEA poder\\xE1 criar o bin\\xE1rio e rodar de onde voc\\xEA quiser. Seja Linux, MacOS ou Windows, sem nenhuma depend\\xEAncia do sistema operacional. Leia mais aqui.\"), mdx(\"h4\", {\n    \"id\": \"referencias\"\n  }, \"Referencias\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://golang.org/pkg/net/http/\"\n  }), \"https://golang.org/pkg/net/http/\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://golang.org/pkg/encoding/json/#Unmarshal\"\n  }), \"https://golang.org/pkg/encoding/json/#Unmarshal\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://golang.org/pkg/io/ioutil/\"\n  }), \"https://golang.org/pkg/io/ioutil/\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://golang.org/pkg/io/#Reader\"\n  }), \"https://golang.org/pkg/io/#Reader\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://tour.golang.org/moretypes/1\"\n  }), \"https://tour.golang.org/moretypes/1\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://reqres.in/\"\n  }), \"https://reqres.in/\")));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/languages/go/2-consumindo-APIs/","title":"Go: Consumindo APIs","tags":["go","golang","API","api"],"date":"November 06, 2020","image":null,"imageAlt":null,"socialImage":null},"previous":{"__typename":"MdxBlogPost","id":"a57ca2b3-c438-5384-bbce-63adaee0dc01","excerpt":"Meta A ideia Ã© criar algo simples para mostrar como podemos reutilizar roles em diferentes projetos. Pensando nisso, vamos criar duas rolesâ€¦","slug":"/tools/ansible/1-criar-roles-reutilizaveis/","title":"Ansible: criar roles reutilizaveis","date":"October 04, 2020"},"next":null},"pageContext":{"id":"f59b954b-3fe6-5b26-a104-9c08611b58c8","previousId":"a57ca2b3-c438-5384-bbce-63adaee0dc01","maxWidth":1380}},"staticQueryHashes":["2744905544","2744905544","3090755652","386998304","764694655"]}